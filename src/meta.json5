{
  "repository": {
    "meta": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
          "beginCaptures": {
            "1": {"name": "keyword.control.directive.c"},
            "2": {"name": "punctuation.definition.directive.c"}
          },
          "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.include.c",
          "patterns": [
            {"include": "#line_continuation_character"},
            {
              "begin": "\"",
              "beginCaptures": {"0": {"name": "punctuation.definition.string.begin.c"}},
              "end": "\"",
              "endCaptures": {"0": {"name": "punctuation.definition.string.end.c"}},
              "name": "string.quoted.double.include.c"
            },
            {
              "begin": "<",
              "beginCaptures": {"0": {"name": "punctuation.definition.string.begin.c"}},
              "end": ">",
              "endCaptures": {"0": {"name": "punctuation.definition.string.end.c"}},
              "name": "string.quoted.other.lt-gt.include.c"
            }
          ]
        },

        {
          "match": "(#define)\\s+(\\w+)",
          "captures": {
            "1": {"name": "keyword.control.directive.c"},
            "2": {"name": "variable.other.constant.c"},
          },
        },

        {
          // "name": "meta.preprocessor.include.c",
          "begin": "\\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\b",
          "beginCaptures": {
            "0": {"name": "storage.type.c"},
          },
          "end": "(\\=)|(;)|$",
          "endCaptures": {
            "1": {"name": "keyword.operator.assignment.c"},
            "2": {"name": "punctuation.terminator.statement.c"},
          },
          "patterns": [
            {"include": "$self"},
            {
              "match": "\\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\b",
              "name": "storage.type.c",
            },
            {
              "match": "\\w+(?=,|;)",
              "name": "variable.other.assignment.c"
            }
          ]
        },
      ]
    }
  }
}
